/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "sysmon_header.h"
#include "sysmonpsu_header.h"
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xgpiops.h"
#include "scugic_header.h"
#include "xscugic.h"
#include "xsysmonpsu.h"
#include "xsysmon.h"
#include "gpio_header.h"
#include "system_test.h"
#include "xtime_l.h"
#include "uart_header.h"
#include "pmodtmp2.h"
#include <stdlib.h>
#include "sleep.h"
#include "uart_header.h"

//#define RUN_SUBMODULES

//Set global constants
#define CHANNEL_LED 				1
#define CHANNEL_PUSH 				2
#define CHANNEL_DIP 				1
#define CHANNEL_LOAD_IP_CORE_EN 	2
//#define CHANNEL_GPIO_IN_LOAD_OUT 	1
#define CHANNEL_GPIO_OUT_LOAD_EN 	2
#define CHANNEL_GPIO_OUT_DUTY_CYCLE 1
#define LED_MEAS_PAUSED				0x01
#define LED_MEAS_STOPPED			0x02
#define LED_LOAD_STARTED			0x04
#define LED_CHIP_TAMPERED			0x08
#define MEASUREMENT_BUFFER_SIZE		100

#define STATUS_LOAD_ON 				0x00
#define STATUS_LOAD_OFF 			0x01
#define STATUS_POLLING_PAUSED 		0x02
#define STATUS_POLLING_CONTINUED 	0x03
#define STATUS_DUTY_CYCLE 			0x04
#define STATUS_CHIP_TAMPERED		0x05
#define STATUS_CHIP_UNTAMPERED		0x06

#define MEASUREMENT_TYPE_AMBIENT_TEMP 	0x00
#define MEASUREMENT_TYPE_PSU_TEMP 		0x01
#define MEASUREMENT_TYPE_PSU_REM_TEMP 	0x02
#define MEASUREMENT_TYPE_PL_TEMP 		0x03
#define MEASUREMENT_TYPE_PSU_VCCINT		0x04
#define MEASUREMENT_TYPE_PSU_VCCAUX 	0x05
#define MEASUREMENT_TYPE_PL_VCCINT 		0x06
#define MEASUREMENT_TYPE_PL_VCCAUX 		0x07

#define AMOUNT_OF_COARSE_MODULES 15
#define AMOUNT_OF_FINE_MODULES 9
#define COARSE_MODULES_BIT_MASK (0xFFFFFFFF >> (32-AMOUNT_OF_COARSE_MODULES))
#define FINE_MODULES_BIT_MASK (0xFFFFFFFF >> (32-AMOUNT_OF_FINE_MODULES))
#define NEW_DUTY_CYCLE_ENABLE_BIT 0x100
#define WAIT_TILL_STARTING_LOAD_TIME_INTERVAL_SEC 1
#define WAIT_TILL_STOPPING_LOAD_TIME_INTERVAL_SEC 3
#define WAIT_TILL_ENDING_MEAS_TIME_INTERVAL_SEC  1
#define TOTAL_MEAS_TIME_INTERVAL_SEC  (WAIT_TILL_STARTING_LOAD_TIME_INTERVAL_SEC + WAIT_TILL_STOPPING_LOAD_TIME_INTERVAL_SEC + WAIT_TILL_ENDING_MEAS_TIME_INTERVAL_SEC)
#define SEC_TO_TIMESTAMP_FACTOR  10000000 // 1000000000 = 1 sec


//Helper functions
void sendStatusMsgViaUart(int status, int value);
void adjustIPCoreLoad(XGpio * gpio_handler);
void triggerMeasurementLoad(XGpio * gpio_dip_handler, XGpio * gpio_load_handler, XGpio * gpio_led_handler);
void pollAndSendCurrentMeasruementData();
void pollAndSendMinMaxMeasruementData();
void controlPolling(XGpio * gpio_led_pb_handler, XGpio * gpio_led_handler);
void controlSendingMinMax();
void changeDutyCycle( XGpio * gpio_load_handler);
void sendCurrentMeasurmentViaUart(int measurmenet_type, float value, XTime time);
void sendMinMaxMeasurmentViaUart(int measurmenet_type, float min, float max, XTime time);
void setDutyCycle( XGpio * gpio_load_handler, int value);
void checkForTampering(XGpio * gpio_led_pb_handler, XGpio * gpio_led_handler);

//Initialize global control variables
int dip_or_load_history;
int button1_on_history;
int polling_paused_history;
int checking_for_tampering_started_history;
int checking_for_tampering_started_time;
int button2_on;
int psu_rem_temp_max;
int psu_rem_temp_max_changed;


#ifndef RUN_SUBMODULES
int main()
{
    init_platform();

    //Initialize global variables
	psu_rem_temp_max_changed = 0;
    loadEnabled = 0;
	sendMinMaxEnabled = 0;
	pausePollingEnabled = 0;
	continuePollingEnabled = 0;
	adjustFactorIPCoreLoad = 0;
	adjustFactorDutyCycle = 0;
    checkForTamperingEnabled = 0;
	checking_for_tampering_started_history = 0;
	checking_for_tampering_started_time = 0;
	setValueDutyCycle = -1;

	dip_or_load_history=0;
	button1_on_history = 0;
	polling_paused_history = 0;
	button2_on = 0;
	psu_rem_temp_max = 0;
    printf("System Monitor Readout\r\n Start timer\r\n");


    XTime_StartTimer();

    //Setup UART Interrupt
    int status = UartPsIntrInitialize(&InterruptController, &UartPs, UART_DEVICE_ID, UART_INT_IRQ_ID);
	if (status != XST_SUCCESS) {
		printf("UART Interrupt Example Test Failed\r\n");
		return XST_FAILURE;
	}
	printf("UART Interrupt Setup Successful\r\n");


    //Setup GPIO Init PL
	XGpio my_gpios_led_pb;
	XGpio_Initialize(&my_gpios_led_pb, XPAR_AXI_GPIO_0_DEVICE_ID);
	XGpio my_gpios_dip_ipload;
	XGpio_Initialize(&my_gpios_dip_ipload, XPAR_AXI_GPIO_1_DEVICE_ID);
	XGpio my_gpios_load;
	XGpio_Initialize(&my_gpios_load, XPAR_AXI_GPIO_2_DEVICE_ID);


	//Run GPIO Self Test
	int result = XGpio_SelfTest(&my_gpios_led_pb);
	if(result != XST_SUCCESS){
		print("Gpio SelfTest failed!\r");
	}
	result = XGpio_SelfTest(&my_gpios_dip_ipload);
	if(result != XST_SUCCESS){
		print("Gpio SelfTest failed!\r");
	}
	result = XGpio_SelfTest(&my_gpios_load);
	if(result != XST_SUCCESS){
		print("Gpio SelfTest failed!\r");
	}

	//Setup Ambient Temp Sensor
	result = configurePmodtmp2();
	if(result != XST_SUCCESS){
		print("Setup Ambient Temp Sensor failed!\r");
	}

	//Set Data Directions
	XGpio_SetDataDirection(&my_gpios_led_pb, CHANNEL_PUSH,0xffffffff); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_led_pb, CHANNEL_LED,0x0); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_dip_ipload, CHANNEL_DIP,0xffffffff); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_dip_ipload, CHANNEL_LOAD_IP_CORE_EN,0x0); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_load, CHANNEL_GPIO_OUT_DUTY_CYCLE,0x0); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_load, CHANNEL_GPIO_OUT_LOAD_EN,0x0); //Bits set to 0 are output and bits set to 1 are input.


	//Setup PWM
	u16 duty_cycle = 0x01;
	changeDutyCycle(&my_gpios_load);

    //========================================================//
	print("Start System Monitor Readout of Vcc and Temp. Interrupt with any pushbutton...\r\n");
	XGpio_DiscreteWrite(&my_gpios_led_pb,CHANNEL_LED, LED_MEAS_STOPPED | LED_MEAS_PAUSED); // Turn on LED1 & LED2
	XGpio_DiscreteWrite(&my_gpios_led_pb,CHANNEL_GPIO_OUT_LOAD_EN, 0x00); // Disable ro


	//System Monitor Readout. Interrupt with pushbutton
	while(button2_on == 0){
		controlPolling(&my_gpios_led_pb, &my_gpios_led_pb );

		controlSendingMinMax();

		triggerMeasurementLoad(&my_gpios_dip_ipload, &my_gpios_load, &my_gpios_led_pb);

		adjustIPCoreLoad(&my_gpios_dip_ipload);

		changeDutyCycle(&my_gpios_load);

		checkForTampering(&my_gpios_led_pb, &my_gpios_led_pb );

	}




	pollAndSendMinMaxMeasruementData();
	//SysMonPsuPolledReadMinMax(XPAR_PSU_AMS_DEVICE_ID); //Read min and max value of vcc and temp
	//SysMonPolledReadMinMax(XPAR_SYSMON_0_DEVICE_ID); //Read min and max value of vcc and temp

	XGpio_DiscreteWrite(&my_gpios_led_pb,1, 0x00);// Turn off LED1


    //========================================================//
    print("End of System Monitor Readout\r\n");
    cleanup_platform();
    return 0;
}
#endif

void sendStatusMsgViaUart(int status, int value)
{
	XTime * Xtime = 0;
	char * msg = NULL;
	XTime_GetTime(Xtime);
	switch(status){
		case STATUS_LOAD_ON:
			asiprintf(&msg,"Load started (time: %lu).\n",(*Xtime));
			break;
		case STATUS_LOAD_OFF:
			asiprintf(&msg,"Load stopped (time: %lu).\n",(*Xtime));
			break;
		case STATUS_POLLING_CONTINUED:
			asiprintf(&msg,"Polling continued (time: %lu).\n",(*Xtime));
			break;
		case STATUS_POLLING_PAUSED:
			asiprintf(&msg,"Polling paused (time: %lu).\n",(*Xtime));
			break;
		case STATUS_DUTY_CYCLE:
		{
			int percent = (int)(((float) value)/2.5);
			asiprintf(&msg,"Duty cycle was changed to %i Percent(time: %lu).\n", percent,(*Xtime));
			break;
		}
		case STATUS_CHIP_TAMPERED:
			asiprintf(&msg,"Chip is in a tampered state(time: %lu)!!!\n",(*Xtime));
			break;
		case STATUS_CHIP_UNTAMPERED:
			asiprintf(&msg,"Chip is untampered(time: %lu).\n",(*Xtime));
			break;
		default:
			asiprintf(&msg,"No status change\n");
	}
	int size_local = strlen(msg);
	sendUart(&UartPs, msg, size_local);
	free(msg);
}

void sendCurrentMeasurmentViaUart(int measurmenet_type, float value, XTime time)
{
	char * msg = NULL;
	switch(measurmenet_type){
		case MEASUREMENT_TYPE_AMBIENT_TEMP:
			asiprintf(&msg,"The Current Ambient Temperature is %0d.%03d Centigrades (time: %lu).\n",(int)(value), SysMonPsuFractionToInt(value), time);
			break;
		case MEASUREMENT_TYPE_PSU_TEMP:
			asiprintf(&msg,"The Current PSU Temperature is %0d.%03d Centigrades (time: %lu).\n",(int)(value), SysMonPsuFractionToInt(value), time);
			break;
		case MEASUREMENT_TYPE_PSU_REM_TEMP:
			asiprintf(&msg,"The Current PSU Remote Temperature is %0d.%03d Centigrades (time: %lu).\n",(int)(value), SysMonPsuFractionToInt(value), time);
			break;
		case MEASUREMENT_TYPE_PL_TEMP:
			asiprintf(&msg,"The Current Temperature is %0d.%03d Centigrades (time: %lu).\n",(int)(value), SysMonPsuFractionToInt(value), time);
			break;
		case MEASUREMENT_TYPE_PL_VCCINT:
			asiprintf(&msg,"The Current VCCINT is %0d.%03d Volt (time: %lu).\n",(int)(value), SysMonPsuFractionToInt(value), time);
			break;
		case MEASUREMENT_TYPE_PL_VCCAUX:
			asiprintf(&msg,"The Current VCCAUX is %0d.%03d Volt (time: %lu).\n",(int)(value), SysMonPsuFractionToInt(value), time);
			break;
		case MEASUREMENT_TYPE_PSU_VCCINT:
			asiprintf(&msg,"The Current PSU VCCINT is %0d.%03d Volt (time: %lu).\n",(int)(value), SysMonPsuFractionToInt(value), time);
			break;
		case MEASUREMENT_TYPE_PSU_VCCAUX:
			asiprintf(&msg,"The Current PSU VCCAUX is %0d.%03d Volt (time: %lu).\n",(int)(value), SysMonPsuFractionToInt(value), time);
			break;
		default:
			asiprintf(&msg,"No status change\n");
	}
	int size_local = strlen(msg);

	//printf("%s", msg);
	sendUart(&UartPs, msg, size_local);
	free(msg);
}

void sendMinMaxMeasurmentViaUart(int measurmenet_type, float min, float max, XTime time)
{
	char * msg = NULL;
	switch(measurmenet_type){
		case MEASUREMENT_TYPE_PSU_TEMP:
			asiprintf(&msg,"The Maximum PSU Temperature is %0d.%03d Centigrades (time: %lu). \n"
						"The Minimum PSU Temperature is %0d.%03d Centigrades (time: %lu).\n",(int)(max), SysMonPsuFractionToInt(max), time,
						(int)(min), SysMonPsuFractionToInt(min), time);
			break;
		case MEASUREMENT_TYPE_PSU_REM_TEMP:
			asiprintf(&msg,"The Maximum PSU Remote Temperature is %0d.%03d Centigrades (time: %lu). \n"
						"The Minimum PSU Remote Temperature is %0d.%03d Centigrades (time: %lu).\n",(int)(max), SysMonPsuFractionToInt(max), time,
						(int)(min), SysMonPsuFractionToInt(min), time);
			break;
		case MEASUREMENT_TYPE_PL_TEMP:
			asiprintf(&msg,"The Maximum Temperature is %0d.%03d Centigrades (time: %lu). \n"
						"The Minimum Temperature is %0d.%03d Centigrades (time: %lu).\n",(int)(max), SysMonPsuFractionToInt(max), time,
						(int)(min), SysMonPsuFractionToInt(min), time);
			break;
		case MEASUREMENT_TYPE_PL_VCCINT:
			asiprintf(&msg,"The Maximum VCCINT is %0d.%03d Voltage (time: %lu). \n"
						"The Minimum VCCINT is %0d.%03d Voltage (time: %lu).\n",(int)(max), SysMonPsuFractionToInt(max), time,
						(int)(min), SysMonPsuFractionToInt(min), time);
			break;
		case MEASUREMENT_TYPE_PL_VCCAUX:
			asiprintf(&msg,"The Maximum VCCAUX is %0d.%03d Voltage (time: %lu). \n"
						"The Minimum VCCAUX is %0d.%03d Voltage (time: %lu).\n",(int)(max), SysMonPsuFractionToInt(max), time,
						(int)(min), SysMonPsuFractionToInt(min), time);
			break;
		case MEASUREMENT_TYPE_PSU_VCCINT:
			asiprintf(&msg,"The Maximum PSU VCCINT is %0d.%03d Voltage (time: %lu). \n"
						"The Minimum PSU VCCINT is %0d.%03d Voltage (time: %lu).\n",(int)(max), SysMonPsuFractionToInt(max), time,
						(int)(min), SysMonPsuFractionToInt(min), time);
			break;
		case MEASUREMENT_TYPE_PSU_VCCAUX:
			asiprintf(&msg,"The Maximum PSU VCCAUX is %0d.%03d Voltage (time: %lu). \n"
						"The Minimum PSU VCCAUX is %0d.%03d Voltage (time: %lu).\n",(int)(max), SysMonPsuFractionToInt(max), time,
						(int)(min), SysMonPsuFractionToInt(min), time);
			break;
		default:
			asiprintf(&msg,"No status change\n");
	}
	int size_local = strlen(msg);
	sendUart(&UartPs, msg, size_local);
	free(msg);
}

void adjustIPCoreLoad(XGpio * gpio_handler)
{
	//Increase/Decrease IP Core Load
	if(adjustFactorIPCoreLoad != 0){
		int ip_core_load_en_mask = XGpio_DiscreteRead(gpio_handler,CHANNEL_LOAD_IP_CORE_EN);
		int en_coarse = ip_core_load_en_mask & COARSE_MODULES_BIT_MASK;
		int en_fine = (ip_core_load_en_mask >> AMOUNT_OF_COARSE_MODULES) & FINE_MODULES_BIT_MASK;
		printf("IP Core Load Enable Mask: 0x%x = fine 0x%x | coarse 0x%x\n",ip_core_load_en_mask,en_fine, en_coarse);
		printf("Bit masks fine 0x%x | coarse 0x%x\n",FINE_MODULES_BIT_MASK, COARSE_MODULES_BIT_MASK);
		switch(adjustFactorIPCoreLoad){
			case INCREASE_FACTOR_FINE:
				en_fine = (en_fine << 1) | 0x1;
				break;
			case INCREASE_FACTOR_COARSE:
				en_coarse = (en_coarse << 1) | 0x1;
				break;
			case DECREASE_FACTOR_FINE:
				en_fine = en_fine >> 1;
				break;
			case DECREASE_FACTOR_COARSE:
				en_coarse = en_coarse >> 1;
				break;
			default:
				break;
		}
		adjustFactorIPCoreLoad = 0;
		ip_core_load_en_mask = (en_coarse & COARSE_MODULES_BIT_MASK) | ((en_fine & FINE_MODULES_BIT_MASK) << AMOUNT_OF_COARSE_MODULES );
		printf("New IP Core Load Enable Mask: 0x%x = fine 0x%x | coarse 0x%x\n",ip_core_load_en_mask,en_fine, en_coarse);
		XGpio_DiscreteWrite(gpio_handler,CHANNEL_LOAD_IP_CORE_EN, ip_core_load_en_mask);
	}
}

void triggerMeasurementLoad(XGpio * gpio_dip_handler, XGpio * gpio_load_handler, XGpio * gpio_led_handler)
{
	//Disable/Enable RO
	int dip_or_load_current = XGpio_DiscreteRead(gpio_dip_handler,CHANNEL_DIP) | loadEnabled;
	int led_current = XGpio_DiscreteRead(gpio_led_handler,CHANNEL_LED);
	if(dip_or_load_current != dip_or_load_history){
		if((dip_or_load_current != 0) || (loadEnabled != 0)){
			printf("GPIOs Dips: %i. Enable Load\n",dip_or_load_current);
			sendStatusMsgViaUart(STATUS_LOAD_ON,0);
			led_current |= LED_LOAD_STARTED;
			XGpio_DiscreteWrite(gpio_load_handler,CHANNEL_GPIO_OUT_LOAD_EN, 0x01); // Enable ro
		}else {
			printf("GPIOs Dips: %i. Disable Load\n", dip_or_load_current);
			sendStatusMsgViaUart(STATUS_LOAD_OFF,0);
			led_current &= (~LED_LOAD_STARTED);
			XGpio_DiscreteWrite(gpio_load_handler,CHANNEL_GPIO_OUT_LOAD_EN, 0x00); // Disable ro

		}
	}
	XGpio_DiscreteWrite(gpio_led_handler,CHANNEL_LED, led_current);
	dip_or_load_history = dip_or_load_current;
}
void pollAndSendCurrentMeasruementData()
{
	XTime time = 0;
	float value =0;
	//printf("Poll and send psu measurement data\n");
	SysMonPsuReadCurrentTemp(XPAR_PSU_AMS_DEVICE_ID, &value, &time);
	sendCurrentMeasurmentViaUart(MEASUREMENT_TYPE_PSU_TEMP, value, time);
	SysMonPsuReadCurrentVccint(XPAR_PSU_AMS_DEVICE_ID, &value, &time);
	sendCurrentMeasurmentViaUart(MEASUREMENT_TYPE_PSU_VCCINT, value, time);
	SysMonPsuReadCurrentVccaux(XPAR_PSU_AMS_DEVICE_ID, &value, &time);
	sendCurrentMeasurmentViaUart(MEASUREMENT_TYPE_PSU_VCCAUX, value, time);

	SysMonPsuReadCurrentTempRem(XPAR_PSU_AMS_DEVICE_ID, &value, &time);
	sendCurrentMeasurmentViaUart(MEASUREMENT_TYPE_PSU_REM_TEMP, value, time);
	if(psu_rem_temp_max < value){
		psu_rem_temp_max = value;
		psu_rem_temp_max_changed = 1;
		//pollAndSendMinMaxMeasruementData();
	}

	//printf("Poll and send pl measurement data\n");

	SysMonReadCurrentTemp(XPAR_SYSMON_0_DEVICE_ID, &value, &time);
	sendCurrentMeasurmentViaUart(MEASUREMENT_TYPE_PL_TEMP, value, time);
	SysMonReadCurrentVccint(XPAR_SYSMON_0_DEVICE_ID, &value, &time);
	sendCurrentMeasurmentViaUart(MEASUREMENT_TYPE_PL_VCCINT, value, time);
	SysMonReadCurrentVccaux(XPAR_SYSMON_0_DEVICE_ID, &value, &time);
	sendCurrentMeasurmentViaUart(MEASUREMENT_TYPE_PL_VCCAUX, value, time);


	//printf("Poll and send ambient measurement data\n");
	readTmpFromPmodtmp2( &value, &time);
	sendCurrentMeasurmentViaUart(MEASUREMENT_TYPE_AMBIENT_TEMP, value, time);

}

void pollAndSendMinMaxMeasruementData()
{
	XTime time = 0;
	float min = 0, max = 0;

	SysMonPsuReadMinMaxTemp(XPAR_PSU_AMS_DEVICE_ID, &max, &min, &time);
	sendMinMaxMeasurmentViaUart(MEASUREMENT_TYPE_PSU_TEMP, min, max, time);
	SysMonPsuReadMinMaxTempRem(XPAR_PSU_AMS_DEVICE_ID, &max, &min, &time);
	sendMinMaxMeasurmentViaUart(MEASUREMENT_TYPE_PSU_REM_TEMP, min, max, time);
	SysMonPsuReadMinMaxVccint(XPAR_PSU_AMS_DEVICE_ID, &max, &min, &time);
	sendMinMaxMeasurmentViaUart(MEASUREMENT_TYPE_PSU_VCCINT, min, max, time);
	SysMonPsuReadMinMaxVccaux(XPAR_PSU_AMS_DEVICE_ID, &max, &min, &time);
	sendMinMaxMeasurmentViaUart(MEASUREMENT_TYPE_PSU_VCCAUX, min, max, time);


	SysMonReadMinMaxTemp(XPAR_SYSMON_0_DEVICE_ID, &max, &min, &time);
	sendMinMaxMeasurmentViaUart(MEASUREMENT_TYPE_PL_TEMP, min, max, time);
	SysMonReadMinMaxVccint(XPAR_SYSMON_0_DEVICE_ID, &max, &min, &time);
	sendMinMaxMeasurmentViaUart(MEASUREMENT_TYPE_PL_VCCINT, min, max, time);
	SysMonReadMinMaxVccaux(XPAR_SYSMON_0_DEVICE_ID, &max, &min, &time);
	sendMinMaxMeasurmentViaUart(MEASUREMENT_TYPE_PL_VCCAUX, min, max, time);

}
void controlPolling(XGpio * gpio_led_pb_handler, XGpio * gpio_led_handler)
{
	//printf("Buttons: %i\n", XGpio_DiscreteRead(&my_gpios_led_pb,CHANNEL_PUSH));
	//u8 * msg = NULL;
	//u32 size = 1;
	//readUart(&UartPs, msg);
	//printf("Read byte %s", msg);
	int led_current = XGpio_DiscreteRead(gpio_led_pb_handler,CHANNEL_LED);
	button2_on = (XGpio_DiscreteRead(gpio_led_pb_handler,CHANNEL_PUSH) & 0x08);
	int button1_on_current = ((XGpio_DiscreteRead(gpio_led_pb_handler,CHANNEL_PUSH) & 0x04)>>2) ;
	int polling_paused = polling_paused_history ^ ((button1_on_current != button1_on_history)&& (button1_on_current));
	polling_paused &= !continuePollingEnabled;
	polling_paused |= pausePollingEnabled;
	button1_on_history = button1_on_current;

	//System Monitor Polling
	if(!polling_paused){
		if(polling_paused < polling_paused_history){
			sendStatusMsgViaUart(STATUS_POLLING_CONTINUED,0);
		}
		led_current |= LED_MEAS_PAUSED;// Turn on LED1
		//Button not pushed at all
		//printf("Sysmon Polling running...\n");
		//char * msg = NULL;
		//SysMonPsuReadCurrentTemp(XPAR_PSU_AMS_DEVICE_ID, &msg); //Read current value of vcc and temp
		//printf("Send %s via Uart\n", msg);
		//int size = strlen(msg);
		//sendUart(&UartPs, msg, size);
		//free(msg);

		//SysMonPsuPolledReadCurrent(XPAR_PSU_AMS_DEVICE_ID); //Read current value of vcc and temp
		//SysMonPolledReadCurrent(XPAR_SYSMON_0_DEVICE_ID); //Read current value of vcc and temp

		pollAndSendCurrentMeasruementData();

		continuePollingEnabled = 0;
	}else {
		if(polling_paused > polling_paused_history){
			printf("Sysmon Polling paused...\n");
			led_current &= (~LED_MEAS_PAUSED); // Turn off LED1
			//pollAndSendMinMaxMeasruementData();
			//SysMonPsuPolledReadMinMax(XPAR_PSU_AMS_DEVICE_ID); //Read min and max value of vcc and temp
			//SysMonPolledReadMinMax(XPAR_SYSMON_0_DEVICE_ID); //Read min and max value of vcc and temp
			sendStatusMsgViaUart(STATUS_POLLING_PAUSED,0);
		}
		pausePollingEnabled = 0;
	}
	polling_paused_history = polling_paused;
	XGpio_DiscreteWrite(gpio_led_handler,CHANNEL_LED, led_current);
}

void checkForTampering(XGpio * gpio_led_pb_handler, XGpio * gpio_led_handler)
{

	XTime * Xtime = 0;
	XTime time = 0;
	float value =0;
	int chip_tampered = 0;
	int led_current = XGpio_DiscreteRead(gpio_led_pb_handler,CHANNEL_LED);
	//int history = checking_for_tampering_started_history;
	if(checkForTamperingEnabled == 1){
		XTime_GetTime(Xtime);
		int starting_time = *Xtime / SEC_TO_TIMESTAMP_FACTOR;
		int current_time = starting_time;
		int end_time = TOTAL_MEAS_TIME_INTERVAL_SEC + starting_time;
		int buffer_index = 0;
		float measurement_buffer[2000];
		array = (float *) calloc(size, sizeof(float));

		// Speicher freigeben
		free(array);
		printf("start time %i, end time %i\n",starting_time, end_time );
		while( current_time < end_time ){
			SysMonPsuReadCurrentTempRem(XPAR_PSU_AMS_DEVICE_ID, &value, &time);
			measurement_buffer[buffer_index] = value;
			if(value > 100){
				chip_tampered++;
			}
			XTime_GetTime(Xtime);
			current_time = *Xtime / SEC_TO_TIMESTAMP_FACTOR;
			printf("current time %i\n",current_time );
			buffer_index++;
		}
		if(measurement_buffer[10] > 20){
			printf("Measruement at position 100 has value %i which is greater than 40.\n",(int)(measurement_buffer[100]) );
			chip_tampered = 1;
		}
		if(chip_tampered == 0){
			sendStatusMsgViaUart(STATUS_CHIP_UNTAMPERED,0);
			led_current &= (~LED_CHIP_TAMPERED);
		}else{
			sendStatusMsgViaUart(STATUS_CHIP_TAMPERED,0);
			led_current |= LED_CHIP_TAMPERED;
		}
		checkForTamperingEnabled = 0;
	}
	XGpio_DiscreteWrite(gpio_led_handler,CHANNEL_LED, led_current);
}

void controlSendingMinMax()
{
	if((sendMinMaxEnabled > 0) || (psu_rem_temp_max_changed > 0)){

		//printf("Sending Min Max values...\n");
		sendMinMaxEnabled = 0;
		psu_rem_temp_max_changed = 0;
		pollAndSendMinMaxMeasruementData();
		//SysMonPsuPolledReadMinMax(XPAR_PSU_AMS_DEVICE_ID); //Read min and max value of vcc and temp
		//SysMonPolledReadMinMax(XPAR_SYSMON_0_DEVICE_ID); //Read min and max value of vcc and temp
	}
}
void setDutyCycle( XGpio * gpio_load_handler, int value)
{
	XGpio_DiscreteWrite(gpio_load_handler,CHANNEL_GPIO_OUT_DUTY_CYCLE, value); // Change duty cycle
	usleep(250);
	value = value | NEW_DUTY_CYCLE_ENABLE_BIT;
	XGpio_DiscreteWrite(gpio_load_handler,CHANNEL_GPIO_OUT_DUTY_CYCLE, value); // Change duty cycle
	usleep(250);
	value = value & (~NEW_DUTY_CYCLE_ENABLE_BIT);
	XGpio_DiscreteWrite(gpio_load_handler,CHANNEL_GPIO_OUT_DUTY_CYCLE, value); // Change duty cycle

}

void changeDutyCycle( XGpio * gpio_load_handler)
{
	//Increase/Decrease IP Core Load
	if(adjustFactorDutyCycle != 0){
		int current_duty_cycle = XGpio_DiscreteRead(gpio_load_handler,CHANNEL_GPIO_OUT_DUTY_CYCLE);
		printf("Current Duty Cycle 0x%x\n",current_duty_cycle);

		current_duty_cycle += adjustFactorDutyCycle;
		if(current_duty_cycle < 0)
			current_duty_cycle = 0;

		printf("New Duty Cycle 0x%x\n",current_duty_cycle);
		setDutyCycle( gpio_load_handler, current_duty_cycle);
		sendStatusMsgViaUart(STATUS_DUTY_CYCLE, current_duty_cycle);


	}
	if(setValueDutyCycle >= 0 ){
		int duty_cycle = setValueDutyCycle * 50;
		if(duty_cycle >= 250)
			duty_cycle = 255;
		printf("New Duty Cycle 0x%x\n",duty_cycle);
		setDutyCycle( gpio_load_handler, 0xff);
		usleep(1250000);
		setDutyCycle( gpio_load_handler, duty_cycle);
		sendStatusMsgViaUart(STATUS_DUTY_CYCLE, duty_cycle);
	}

	setValueDutyCycle = -1;
	adjustFactorDutyCycle = 0;


}

