/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xgpiops.h"
#include "scugic_header.h"
#include "xscugic.h"
#include "xsysmonpsu.h"
#include "sysmonpsu_header.h"
#include "gpio_header.h"
#include "system_test.h"

/*
 * The following constant is used to wait after an LED is turned on to make
 * sure that it is visible to the human eye.  This constant might need to be
 * tuned for faster or slower processor speeds.
 */
#define LED_DELAY	  15000000


int main()
{

	static XScuGic intc;
	static XSysMonPsu psu_ams;
    init_platform();

    print("Test PL GPIOs\n\r");

    //Run System Tests
    if(run_system_test(&intc, &psu_ams) == XST_FAILURE){
    	printf("System Test failed!!!\n");
    	return 0;
    }
    printf("System Test was successful. Continue...\n");

    //Setup GPIO Init PL
	XGpio my_gpios;
	XGpio_Initialize(&my_gpios, XPAR_AXI_GPIO_0_DEVICE_ID);

	//Run GPIO Self Test
	int result = XGpio_SelfTest(&my_gpios);
	if(result != XST_SUCCESS){
		print("Gpio SelfTest failed!");
	}
	XGpio_SetDataDirection(&my_gpios, 2,0xffffffff); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios, 1,0xffffffff); //Bits set to 0 are output and bits set to 1 are input.

	XGpio_DiscreteWrite(&my_gpios,1, 0x01); // Turn on LED1


	while(XGpio_DiscreteRead(&my_gpios,2) == 0){
		SysMonPsuPolledReadCurrent(XPAR_PSU_AMS_DEVICE_ID); //Read current value of vcc and temp
	}
	SysMonPsuPolledReadMinMax(XPAR_PSU_AMS_DEVICE_ID); //Read min and max value of vcc and temp

	XGpio_DiscreteWrite(&my_gpios,1, 0x00);// Turn off LED1

    print("End of Test PL GPIOs\n\r");

    cleanup_platform();
    return 0;
}
