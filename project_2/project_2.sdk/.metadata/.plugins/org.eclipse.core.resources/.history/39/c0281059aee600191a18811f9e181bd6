/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "sysmon_header.h"
#include "sysmonpsu_header.h"
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xgpiops.h"
#include "scugic_header.h"
#include "xscugic.h"
#include "xsysmonpsu.h"
#include "xsysmon.h"
#include "gpio_header.h"
#include "system_test.h"
#include "xtime_l.h"
#include "uart_header.h"

/*
 * The following constant is used to wait after an LED is turned on to make
 * sure that it is visible to the human eye.  This constant might need to be
 * tuned for faster or slower processor speeds.
 */
#define LED_DELAY	  15000000
#define CHANNEL_LED 1
#define CHANNEL_PUSH 2
#define CHANNEL_DIP 1
#define CHANNEL_GPIO_IN_RO_OUT 1
#define CHANNEL_GPIO_OUT_RO_EN 2


int main()
{
    init_platform();
    printf("System Monitor Readout\r\n Start timer\r\n");


    XTime_StartTimer();

    //========================================================//
    int status = UartPsIntrInitialize(&InterruptController, &UartPs, UART_DEVICE_ID, UART_INT_IRQ_ID);
	if (status != XST_SUCCESS) {
		printf("UART Interrupt Example Test Failed\r\n");
		return XST_FAILURE;
	}
	printf("UART Interrupt Setup Successful\r\n");

    //========================================================//
    //Setup GPIO Init PL
	XGpio my_gpios_led_pb;
	XGpio_Initialize(&my_gpios_led_pb, XPAR_AXI_GPIO_0_DEVICE_ID);
	XGpio my_gpios_dip;
	XGpio_Initialize(&my_gpios_dip, XPAR_AXI_GPIO_1_DEVICE_ID);
	XGpio my_gpios_ro;
	XGpio_Initialize(&my_gpios_ro, XPAR_AXI_GPIO_2_DEVICE_ID);

	//Run GPIO Self Test
	int result = XGpio_SelfTest(&my_gpios_led_pb);
	if(result != XST_SUCCESS){
		print("Gpio SelfTest failed!\r");
	}
	result = XGpio_SelfTest(&my_gpios_dip);
	if(result != XST_SUCCESS){
		print("Gpio SelfTest failed!\r");
	}
	result = XGpio_SelfTest(&my_gpios_ro);
	if(result != XST_SUCCESS){
		print("Gpio SelfTest failed!\r");
	}

	XGpio_SetDataDirection(&my_gpios_led_pb, CHANNEL_PUSH,0xffffffff); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_led_pb, CHANNEL_LED,0x0); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_dip, CHANNEL_DIP,0xffffffff); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_ro, CHANNEL_GPIO_IN_RO_OUT,0x1); //Bits set to 0 are output and bits set to 1 are input.
	XGpio_SetDataDirection(&my_gpios_ro, CHANNEL_GPIO_OUT_RO_EN,0x0); //Bits set to 0 are output and bits set to 1 are input.


    //========================================================//
	print("Start System Monitor Readout of Vcc and Temp. Interrupt with any pushbutton...\r\n");
	XGpio_DiscreteWrite(&my_gpios_led_pb,CHANNEL_LED, 0x03); // Turn on LED1 & LED2
	XGpio_DiscreteWrite(&my_gpios_led_pb,CHANNEL_GPIO_OUT_RO_EN, 0x00); // Disable ro

	int button2_on = 0;
	int button1_on_current = 0;
	int button1_on_history = 0;
	int polling_paused = 0;
	int pause_event = 0;
	int dip_current =0, dip_history=0;
	int led_current =0;
	//System Monitor Readout. Interrupt with pushbutton
	while(button2_on == 0){
		led_current = XGpio_DiscreteRead(&my_gpios_led_pb,CHANNEL_LED);
		button2_on = (XGpio_DiscreteRead(&my_gpios_led_pb,CHANNEL_PUSH) & 0x08);
		button1_on_current = (XGpio_DiscreteRead(&my_gpios_led_pb,CHANNEL_PUSH) & 0x04);
		polling_paused ^= (button1_on_current ^ button1_on_history)&& (button1_on_current);
		button1_on_history = button1_on_current;

		//System Monitor Polling
		if(!polling_paused){
			//Button not pushed at all
			led_current |= 0x01;// Turn on LED1
			SysMonPsuPolledReadCurrent(XPAR_PSU_AMS_DEVICE_ID); //Read current value of vcc and temp
			//SysMonPolledReadCurrent(XPAR_SYSMON_0_DEVICE_ID); //Read current value of vcc and temp
			pause_event = 0;
		}else {
			if(pause_event == 0){
				led_current &= (~0x01); // Turn off LED1
				//SysMonPsuPolledReadMinMax(XPAR_PSU_AMS_DEVICE_ID); //Read min and max value of vcc and temp
				//SysMonPolledReadMinMax(XPAR_SYSMON_0_DEVICE_ID); //Read min and max value of vcc and temp
				pause_event = 1;
			}
		}

		//Disable/Enable RO
		dip_current = XGpio_DiscreteRead(&my_gpios_dip,CHANNEL_DIP);
		if(dip_current != dip_history){
			if(dip_current != 0 ){
				printf("GPIOs Dips: %i. Enable RO\n",dip_current);
				led_current |= 0x04;
				XGpio_DiscreteWrite(&my_gpios_ro,CHANNEL_GPIO_OUT_RO_EN, 0x01); // Enable ro
			}else {
				printf("GPIOs Dips: %i. Disable RO\n", dip_current);
				led_current &= (~0x04);
				XGpio_DiscreteWrite(&my_gpios_ro,CHANNEL_GPIO_OUT_RO_EN, 0x00); // Disable ro

			}
		}
		XGpio_DiscreteWrite(&my_gpios_led_pb,CHANNEL_LED, led_current);
		dip_history = dip_current;
	}




	SysMonPsuPolledReadMinMax(XPAR_PSU_AMS_DEVICE_ID); //Read min and max value of vcc and temp
	SysMonPolledReadMinMax(XPAR_SYSMON_0_DEVICE_ID); //Read min and max value of vcc and temp

	XGpio_DiscreteWrite(&my_gpios_led_pb,1, 0x00);// Turn off LED1


    //========================================================//
    print("End of System Monitor Readout\r\n");
    cleanup_platform();
    return 0;
}
